{"version":3,"sources":["config/app.ts","app.min.js","app/controllers/appcontroller.ts","app/controllers/notecontroller.ts","app/controllers/notescontroller.ts","app/directives/autofocus.ts","app/directives/editor.ts","app/directives/issaving.ts","app/directives/timeoutchange.ts","app/directives/tooltip.ts","app/filters/notetitle.ts","app/services/is.ts","app/services/notesmodel.ts","app/services/savequeue.ts"],"names":["app","angular","module","config","$provide","$routeProvider","RestangularProvider","$httpProvider","$windowProvider","defaults","headers","common","requesttoken","oc_requesttoken","value","saveInterval","when","templateUrl","controller","resolve","note","$route","$q","is","Restangular","deferred","defer","noteId","current","params","loading","one","get","then","reject","promise","otherwise","redirectTo","$window","$get","url","location","href","baseUrl","split","setBaseUrl","run","$rootScope","$location","NotesModel","$on","notes","getAll","length","sorted","sort","a","b","modified","path","id","$scope","init","lastViewedNote","$routeParams","SaveQueue","updateIfExists","isSaving","updateTitle","title","content","t","save","add","route","notesResource","all","getList","addAll","create","post","remove","$emit","directive","restrict","link","scope","element","focus","$timeout","editor","mdEdit","change","$apply","setValue","notesIsSaving","onbeforeunload","attributes","timeout","interval","on","cancel","notesTimeoutChange","tooltip","filter","trim","replace","factory","this","notesIds","prototype","i","updated","isDefined","push","splice","_queue","_flushLock","_flush","keys","Object","self","requests","put","_noteUpdateRequest","bind","response"],"mappings":"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","file":"app.min.js","sourcesContent":[null,"/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\n    config(function ($provide, $routeProvider, RestangularProvider, $httpProvider, $windowProvider) {\n    'use strict';\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = oc_requesttoken;\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5 * 1000 // miliseconds\n    });\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: function ($route, $q, is, Restangular) {\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n                return deferred.promise;\n            }\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n    // dynamically set base URL for HTTP requests, assume that there is no other\n    // index.php in the routes\n    var $window = $windowProvider.$get();\n    var url = $window.location.href;\n    var baseUrl = url.split('index.php')[0] + 'index.php/apps/notes';\n    RestangularProvider.setBaseUrl(baseUrl);\n}).run(function ($rootScope, $location, NotesModel) {\n    'use strict';\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if (a.modified > b.modified) {\n                    return 1;\n                }\n                else if (a.modified < b.modified) {\n                    return -1;\n                }\n                else {\n                    return 0;\n                }\n            });\n            var note = notes[sorted.length - 1];\n            $location.path('/notes/' + note.id);\n        }\n        else {\n            $location.path('/');\n        }\n    });\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\napp.controller('AppController', function ($scope, $location, is) {\n    'use strict';\n    $scope.is = is;\n    $scope.init = function (lastViewedNote) {\n        if (lastViewedNote !== 0) {\n            $location.path('/notes/' + lastViewedNote);\n        }\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\napp.controller('NoteController', function ($routeParams, $scope, NotesModel, SaveQueue, note) {\n    'use strict';\n    NotesModel.updateIfExists(note);\n    $scope.note = NotesModel.get($routeParams.noteId);\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.updateTitle = function () {\n        $scope.note.title = $scope.note.content.split('\\n')[0] ||\n            t('notes', 'New note');\n    };\n    $scope.save = function () {\n        var note = $scope.note;\n        SaveQueue.add(note);\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', function ($routeParams, $scope, $location, Restangular, NotesModel) {\n    'use strict';\n    $scope.route = $routeParams;\n    $scope.notes = NotesModel.getAll();\n    var notesResource = Restangular.all('notes');\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n    });\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n/**\n * Copyright (c) 2015, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\napp.directive('editor', ['$timeout', function ($timeout) {\n        'use strict';\n        return {\n            restrict: 'A',\n            link: function (scope, element) {\n                var editor = mdEdit(element[0], { change: function (value) {\n                        $timeout(function () {\n                            scope.$apply(function () {\n                                scope.note.content = value;\n                                scope.updateTitle();\n                            });\n                        });\n                    } });\n                editor.setValue(scope.note.content);\n            }\n        };\n    }]);\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\napp.directive('notesIsSaving', function ($window) {\n    'use strict';\n    return {\n        restrict: 'A',\n        scope: {\n            'notesIsSaving': '='\n        },\n        link: function (scope) {\n            $window.onbeforeunload = function () {\n                if (scope.notesIsSaving) {\n                    return t('notes', 'Note is currently saving. Leaving ' +\n                        'the page will delete all changes!');\n                }\n                else {\n                    return null;\n                }\n            };\n        }\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n/**\n * Like ng-change only that it does not fire when you type faster than\n * 300 ms\n */\napp.directive('notesTimeoutChange', function ($timeout) {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element, attributes) {\n            var interval = 300; // 300 miliseconds timeout after typing\n            var timeout;\n            element.on('input propertychange', function () {\n                $timeout.cancel(timeout);\n                timeout = $timeout(function () {\n                    scope.$apply(attributes.notesTimeoutChange);\n                }, interval);\n            });\n        }\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\napp.directive('notesTooltip', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip();\n        }\n    };\n});\n/**\n * Copyright (c) 2015, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n/**\n * removes whitespaces and leading #\n */\napp.filter('noteTitle', function () {\n    'use strict';\n    return function (value) {\n        value = value.split('\\n')[0] || 'newNote';\n        return value.trim().replace(/^#+/g, '');\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\napp.factory('is', function () {\n    'use strict';\n    return {\n        loading: false\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for (var i = 0; i < notes.length; i += 1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function (note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            return this.notesIds[id];\n        },\n        updateIfExists: function (updated) {\n            var note = this.notesIds[updated.id];\n            if (angular.isDefined(note)) {\n                note.title = updated.title;\n                note.modified = updated.modified;\n                note.content = updated.content;\n            }\n            else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for (var i = 0; i < this.notes.length; i += 1) {\n                var note = this.notes[i];\n                if (note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        }\n    };\n    return new NotesModel();\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\napp.factory('SaveQueue', function ($q) {\n    'use strict';\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n    };\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if (keys.length === 0 || this._flushLock) {\n                return;\n            }\n            else {\n                this._flushLock = true;\n            }\n            var self = this;\n            var requests = [];\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for (var i = 0; i < keys.length; i += 1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(this._noteUpdateRequest.bind(null, note)));\n            }\n            this._queue = {};\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.title = response.title;\n            note.modified = response.modified;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        }\n    };\n    return new SaveQueue();\n});\n",null,null,null,null,null,null,null,null,null,null,null,null],"sourceRoot":"/source/"}